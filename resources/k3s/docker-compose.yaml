version: '3'
services:
  radarr:
    image: lscr.io/linuxserver/radarr:develop
    container_name: radarr
    networks:
      - internal
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      - UMASK_SET=${UMASK_SET}
      - VIRTUAL_HOST=localhost
    volumes:
      - ${ROOT_CONFIG}/radarr:/config
      - ${ROOT_DATA}/downloads/complete:/downloads/complete
      - ${ROOT_DATA}/downloads/recycle:/downloads/recycle
      - /etc/localtime:/etc/localtime:ro
      - ${NSF_SERVER_DIR}:${NSF_SERVER_DIR}
      - ${DOWNLOADS_DIR}:${DOWNLOADS_DIR}
    ports:
      - 7878:7878
    restart: always

  sonarr:
    image: lscr.io/linuxserver/sonarr:develop
    container_name: sonarr
    networks:
      - internal
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      - UMASK_SET=${UMASK_SET}
      - VIRTUAL_HOST=localhost
    volumes:
      - ${ROOT_CONFIG}/sonarr:/config
      - ${ROOT_DATA}/downloads/complete:/downloads/complete
      - ${ROOT_DATA}/downloads/recycle:/downloads/recycle
      - /etc/localtime:/etc/localtime:ro
      - ${NSF_SERVER_DIR}:${NSF_SERVER_DIR}
      - ${DOWNLOADS_DIR}:${DOWNLOADS_DIR}
    ports:
      - 8989:8989
    restart: always
  readarr:
    image: lscr.io/linuxserver/readarr:develop
    container_name: readarr
    networks:
      - internal
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      - UMASK_SET=${UMASK_SET}
      - VIRTUAL_HOST=localhost
    volumes:
      - ${ROOT_CONFIG}/readarr:/config
      - ${ROOT_DATA}/downloads/complete:/downloads/complete
      - ${ROOT_DATA}/downloads/recycle:/downloads/recycle
      - /etc/localtime:/etc/localtime:ro
      - ${NSF_SERVER_DIR}:${NSF_SERVER_DIR}
      - ${DOWNLOADS_DIR}:${DOWNLOADS_DIR}
    ports:
      - 8787:8787  # Default port for Readarr
    restart: always

  bazarr:
    image: linuxserver/bazarr
    container_name: bazarr
    networks:
      - internal
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      - UMASK_SET=${UMASK_SET}
      - PARR_API_KEY=${PARR_API_KEY}
      - PARR_URL=${PARR_URL}
      - PSON_API_KEY=${PSON_API_KEY}
      - PSON_URL=${PSON_URL}
      - PBAZ_API_KEY=${PBAZ_API_KEY}
      - PBAZ_URL=${PBAZ_URL}
    volumes:
      - ${ROOT_CONFIG}/bazarr:/config
      - ${ROOT_DATA}/media/movies:/movies
      - ${ROOT_DATA}/media/tvshows:/tvshows
      - /etc/localtime:/etc/localtime:ro
      - ${NSF_SERVER_DIR}:${NSF_SERVER_DIR}
    ports:
      - 6767:6767
    restart: always

  overseerr:
    image: sctx/overseerr:latest
    container_name: overseerr
    environment:
      - LOG_LEVEL=debug
      - TZ=${TZ}
    ports:
      - 5055:5055
    volumes:
      - ${ROOT_CONFIG}/overseerr:/app/config
    networks:
      - internal
    restart: always

  nginx:
    image: nginx:latest
    container_name: nginx
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    volumes:
      - ${ROOT_CONFIG}/nginx/nginx.conf:/etc/nginx/conf.d/default.conf
      - ${ROOT_CONFIG}/nginx/certs:/etc/nginx/certs
      - ${ROOT_CONFIG}/nginx/html:/var/www/certbot
      - ${ROOT_CONFIG}/nginx/logs:/var/log/nginx
    ports:
      - 80:80
      - 443:443
    depends_on:
      - sonarr
      - radarr
      - overseerr
      - bazarr
      - certbot
      - sabnzbd
      - jellyfin
      - tautulli
    networks:
      - internal

  certbot:
    image: certbot/dns-cloudflare
    container_name: certbot
    volumes:
      - ${ROOT_CONFIG}/nginx/certs:/etc/letsencrypt
      - ${ROOT_CONFIG}/certbot/cloudflare.ini:/etc/letsencrypt/cloudflare.ini
    entrypoint: >
      /bin/sh -c "trap exit TERM; while :; do certbot certonly --dns-cloudflare --dns-cloudflare-credentials /etc/letsencrypt/cloudflare.ini --agree-tos --no-eff-email --email philipsolo4@gmail.com -d local.solomonidis.org; sleep 12h & wait $${!}; done;"
    restart: unless-stopped

  sabnzbd:
    image: lscr.io/linuxserver/sabnzbd:latest
    container_name: sabnzbd
    networks:
      - internal
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      - UMASK_SET=${UMASK_SET}
      - VIRTUAL_HOST=localhost
      - SABNZBD_API_KEY=${SABNZBD_API_KEY}
    volumes:
      - ${ROOT_CONFIG}/sabnzbd:/config
      - ${ROOT_DATA}/downloads:/downloads
      - /etc/localtime:/etc/localtime:ro
      - ${NSF_SERVER_DIR}:${NSF_SERVER_DIR}
      - ${DOWNLOADS_DIR}:${DOWNLOADS_DIR}
    ports:
      - 8080:8080
      - 9090:9090
    restart: always

  jellyfin:
    image: jellyfin/jellyfin:latest
    container_name: jellyfin
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    volumes:
      - ${ROOT_CONFIG}/jellyfin:/config
      - ${ROOT_DATA}/media:${ROOT_DATA}/media
      - ${NSF_SERVER_DIR}:${NSF_SERVER_DIR}
      - /mnt/downloads_volume/jellyfin:/mnt/downloads_volume
    ports:
      - 8096:8096
      - 8920:8920
    networks:
      - internal
    restart: always

  home-assistant:
    image: ghcr.io/home-assistant/home-assistant:stable
    container_name: HomeAssistant
    network_mode: host
    depends_on:
      - mosquitto
      - zigbee2mqtt
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /var/run/docker.sock:/var/run/docker.sock
      - ${ROOT_CONFIG}/HomeAssistant:/config
    restart: unless-stopped

  mosquitto:
    image: eclipse-mosquitto
    container_name: mosquitto
    user: ${PUID}:${PUID}
    volumes:
      - ${ROOT_CONFIG}/mosquitto/config:/mosquitto/config
    ports:
      - 1883:1883
      - 9001:9001
    restart: always

  zigbee2mqtt:
    container_name: zigbee2mqtt
    image: koenkk/zigbee2mqtt:latest
    restart: unless-stopped
    network_mode: host
    depends_on:
      - mosquitto
    volumes:
      - ${ROOT_CONFIG}/z2m:/app/data
      - /run/udev:/run/udev:ro
    environment:
      - TZ=${TZ}
    devices:
      - /dev/ttyUSB0:/dev/ttyACM0

  omada-controller:
    image: mbentley/omada-controller:5.13
    container_name: omada-controller
    network_mode:
      host
    volumes:
      - ${ROOT_CONFIG}/omada-controller/data:/opt/tplink/EAPController/data
      - ${ROOT_CONFIG}/omada-controller/work:/opt/tplink/EAPController/work
      - ${ROOT_CONFIG}/omada-controller/logs:/opt/tplink/EAPController/logs
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      - MANAGE_HTTP_PORT=8088
      - MANAGE_HTTPS_PORT=8043
      - PORTAL_HTTP_PORT=8088
      - PORTAL_HTTPS_PORT=8043
      - SHOW_SERVER_LOGS=true
      - SHOW_MONGODB_LOGS=false
    restart: unless-stopped

  radarr-exporter:
    image: ghcr.io/onedr0p/exportarr:v2.0
    container_name: radarr-exporter
    command: ["radarr"]
    environment:
      PORT: 9708
      URL: "http://radarr:7878/radarr" # or; http://radarr:7878
      APIKEY: ${RADARR_API_KEY}
    networks:
      - internal # optional
    ports:
      - "9708:9708"
    restart: unless-stopped

  node-exporter:
    image: prom/node-exporter
    container_name: node-exporter
    privileged: true
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.ignored-mount-points="^/(sys|proc|dev|host|etc)($$|/)"'
    ports:
      - 9100:9100
    restart: unless-stopped
    networks:
      - internal

  bazarr-exporter:
    image: ghcr.io/onedr0p/exportarr:v2.0
    container_name: bazarr-exporter
    command: ["bazarr"]
    environment:
      PORT: 9709
      URL: "http://bazarr:6767/bazarr"
      APIKEY: ${BAZARR_API_KEY}
    networks:
      - internal
    ports:
      - "9709:9709"
    restart: unless-stopped

  sonarr-exporter:
    image: ghcr.io/onedr0p/exportarr:v2.0
    container_name: sonarr-exporter
    command: ["sonarr"]
    environment:
      PORT: 9710
      URL: "http://sonarr:8989/sonarr"
      APIKEY: ${SONARR_API_KEY}
    networks:
      - internal
    ports:
      - "9710:9710"
    restart: unless-stopped

  sabnzbd-exporter:
    image: ghcr.io/onedr0p/exportarr:v2.0
    container_name: sabnzbd-exporter
    command: ["sabnzbd"]
    environment:
      PORT: 9712
      URL: "http://sabnzbd:8080/sabnzbd"
      APIKEY: ${SABNZBD_API_KEY}
    networks:
      - internal
    ports:
      - "9712:9712"
    restart: unless-stopped

  cadvisor:
    container_name: monitoring-cadvisor
    image: gcr.io/cadvisor/cadvisor:v0.49.1
    privileged: true
    command:
      - '-housekeeping_interval=15s'
      - '-docker_only=true'
      - '-store_container_labels=false'
      - '-port=8383'
    ports:
      - 8383:8383
    security_opt:
      - apparmor=unconfined
    devices:
      - /dev/kmsg
    volumes:
      - "/:/rootfs"
      - "/var/run:/var/run"
      - "/sys:/sys"
      - "/dev/disk/:/dev/disk"

  tautulli:
    image: tautulli/tautulli:latest
    container_name: tautulli
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    volumes:
      - ${ROOT_CONFIG}/tautulli:/config
    ports:
      - 8181:8181
    networks:
      - internal
    restart: unless-stopped


networks:
  internal:
    external: false
    driver: bridge